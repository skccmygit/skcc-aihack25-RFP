
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  role        Role         @relation(fields: [roleId], references: [id])
  roleId      String
  createdAt   DateTime     @default(now())
  status      String       @default("active")
  enrollments Enrollment[]
  progress    ProgressLog[]
  completions Completion[]
  certificates Certificate[]
  authLogs    AuthLog[]
  responses   SurveyResponse[]
  satisfactions Satisfaction[]
  inquiries   Inquiry[]
  notifications Notification[]
}

model Role {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Course {
  id          String       @id @default(uuid())
  title       String
  category    String
  description String?
  level       String?
  isRequired  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  contents    CourseContent[]
  enrollments Enrollment[]
  completions Completion[]
  certificates Certificate[]
  surveys     Survey[]
  schedules   Schedule[]
  stats       StatsOverview[]
  satisfactions Satisfaction[]
}

model Enrollment {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String
  status        String   @default("신청")
  paymentStatus String   @default("unpaid")
  appliedAt     DateTime @default(now())
  startedAt     DateTime?
  endedAt       DateTime?
}

model CourseContent {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  title     String
  type      String
  orderIndex Int?
  duration  Int?
  createdAt DateTime @default(now())
  progress  ProgressLog[]
  quizzes   Quiz[]
  assignments Assignment[]
}

model ProgressLog {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  courseContent CourseContent @relation(fields: [courseContentId], references: [id])
  courseContentId String
  watched    Boolean  @default(false)
  watchedAt  DateTime?
}

model Completion {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  completedAt DateTime?
  status    String   @default("미완료")
}

model Certificate {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       String
  certificateUrl String?
  issuedAt       DateTime @default(now())
}

model Quiz {
  id               String   @id @default(uuid())
  courseContent    CourseContent @relation(fields: [courseContentId], references: [id])
  courseContentId  String
  question         String
  choices          String?
  answer           String?
}

model Assignment {
  id               String   @id @default(uuid())
  courseContent    CourseContent @relation(fields: [courseContentId], references: [id])
  courseContentId  String
  description      String?
  submissionDeadline DateTime?
  maxScore         Int      @default(100)
}

model Survey {
  id          String   @id @default(uuid())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  questions   SurveyQuestion[]
  responses   SurveyResponse[]
}

model SurveyQuestion {
  id           String   @id @default(uuid())
  survey       Survey   @relation(fields: [surveyId], references: [id])
  surveyId     String
  questionText String
  questionType String
}

model SurveyResponse {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  survey      Survey   @relation(fields: [surveyId], references: [id])
  surveyId    String
  question    SurveyQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  responseText String?
}

model Satisfaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  score     Int
  comment   String?
  submittedAt DateTime @default(now())
}

model StatsOverview {
  id               String   @id @default(uuid())
  course           Course   @relation(fields: [courseId], references: [id])
  courseId         String
  totalEnrollments Int
  completionRate   Decimal?
  avgSatisfaction  Decimal?
}

model Announcement {
  id         String   @id @default(uuid())
  title      String
  content    String
  createdAt  DateTime @default(now())
  createdBy  AdminUser @relation(fields: [createdById], references: [id])
  createdById String
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String
}

model Inquiry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  status    String   @default("접수")
  createdAt DateTime @default(now())
}

model AdminUser {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  announcements Announcement[]
  roomReservations RoomReservation[]
}

model Classroom {
  id            String   @id @default(uuid())
  name          String
  location      String?
  contact       String?
  capacity      Int?
  pricePerHour  Int?
  status        String   @default("사용 가능")
  reservations  RoomReservation[]
}

model RoomReservation {
  id           String   @id @default(uuid())
  classroom    Classroom @relation(fields: [classroomId], references: [id])
  classroomId  String
  reservedBy   AdminUser @relation(fields: [reservedById], references: [id])
  reservedById String
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  status       String   @default("요청됨")
}

model AuthLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  loggedAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  sentAt    DateTime @default(now())
}

model Schedule {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  eventDate DateTime
  notify    Boolean  @default(false)
}
